<script>
    $(document).ready(async () => {
        /** Summernote common configuration */
        const summernoteCallBacks = {
            onImageUpload: (files, editor, welEditable) => {
                uploadImage(files[0], editor, welEditable)
            },
            onMediaDelete: function (target) {
                DeleteFile(target[0].src);
            },
            onKeyup: function (e) {
                const key = e.keyCode || e.charCode;
                if (key == 8 || key == 46) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            }
        }
        const _summernoteConfig = {
            disableDragAndDrop: true,
            height: '180px',
            width: '650px',
            callbacks: summernoteCallBacks
        }

        /** Initialize Summernote Editor*/
        $('#editor').summernote(_summernoteConfig)
        /** Make input fields pre-filled if Feature data is present*/
        await axios(axiosConfig(`${config.SERVER_URL}${config.URLS.GET_FEATURE}`, 'GET'))
            .then((resp) => {
                const { data: { data } } = resp
                if (data.length > 0) {
                    localStorage.setItem('featureId', data[0]._id)
                    const name = $('#NameInput').val(data[0]?.name)
                    const subText = $('#SubtextInput').val(data[0]?.subText)
                    const htmlContent = $('#editor').summernote('code', data[0]?.htmlContent)
                    const quote = $('#QuoteInput').val(data[0]?.quote)
                    const _color = $('.glow').val(data[0]?.bannerTextColor)
                    const profileLinks = $('#ProfileLink').val(data[0]?.profileLinks)
                    if (data?.bannerMediaUrl !== "") {

                        $('#BannerText').prop('style', 'display: none')
                        $('#BannerImagePreview').prop('style', 'display: block')
                        $('#BannerImagePreview').prop('src', data[0]?.bannerMediaUrl)
                    }
                }
                else {
                    $('#UpdateFeature').text('Create')
                }

            })
            .catch((err) => ToastMsg(err?.response?.data?.message, 'Error'))



        /** Method to upload image on S3*/
        const uploadImage = async (file, editor, welEditable) => {
            let data = new FormData();
            data.append("image", file);
            await axios({
                url: `${config.SERVER_URL}${config.URLS.FEATURE_UPLOAD_IMAGE}`,
                method: 'POST',
                data: data,
                processData: false,
                headers: {
                    Authorization: `Bearer ${token}`
                }
            }).then((response) => {
                const url = response?.data?.data?.data?.Location
                $('#editor').summernote('insertImage', url, 'myimage')
            }).catch((e) => ToastMsg(e?.response?.data?.message, 'Error'))
        }

        /** Method to Update Feature*/
        $('#Update_Confirm_Modal').on('show.bs.modal', async function () {
            $('#UpdateFeature').off().on('click', async function () {
                $('#UpdateFeature').attr('disabled', true)
                $('#UpdateFeature').text('Updating...')
                let obj = {}
                let formData = new FormData()
                const featureId = localStorage.getItem('featureId')
                formData.append('image', $('#BannerImageInput').prop('files')[0])
                formData.append('name', $('#NameInput').val().trim())
                formData.append('subText', $('#SubtextInput').val().trim())
                formData.append('htmlContent', $('#editor').summernote('code'))
                formData.append('quote', $('#QuoteInput').val().trim())
                formData.append('_color', $('.glow').val())
                formData.append('featureId', featureId)
                formData.append('profileLinks', $('#ProfileLink').val())

                featureId ? obj = { url: `${config.SERVER_URL}${config.URLS.UPDATE_FEATURE}`, type: 'PATCH' } : obj = { url: `${config.SERVER_URL}${config.URLS.CREATE_FEATURE}`, type: 'POST' }
                await axios(axiosConfig(obj.url, obj.type, formData, true))
                    .then((resp) => {
                        $('#Update_Confirm_Modal').modal('hide')
                        $('#UpdateFeature').attr('disabled', false)
                        $('#UpdateFeature').text('Update')
                        ToastMsg(resp?.data?.message, 'Success')

                    })
                    .catch((err) => {
                        $('#Update_Confirm_Modal').modal('hide')
                        $('#UpdateFeature').attr('disabled', false)
                        $('#UpdateFeature').text('Update')
                        ToastMsg(err?.response?.data?.message, 'Error')
                    })

            })
        })


    })

    $('.color_picker').click(function (e) {
        $(`#${this.value.slice(1)}`).attr('disabled')
        $('.color_picker').removeAttr('disabled')
        $('.color_picker').removeClass('glow')
        this.classList.add('glow')
    })

    /** Update/Create Feature Method*/
    const _UpdateFeature = async () => {
        const form = $('#Feature_Form')
        form.validate({
            rules: {
                name: {
                    required: true,
                },
                subText: {
                    required: true,
                },
            }
        })
        if (form.valid()) $('#Update_Confirm_Modal').modal('show')
    }

    $('#multiple-select-field').select2({
        width: '100%',
        placeholder: $(this).data('placeholder'),
        closeOnSelect: false,
    });

    let imageInput = document.getElementById("BannerImageInput")
    let preview = document.getElementById("BannerImagePreview")
    imageInput.addEventListener("change", (event) => {
        $('#BannerText').attr('style', 'display: none')
        $('#BannerImagePreview').attr('style', 'display: block')
        let url = URL.createObjectURL(event.target.files[0])
        preview.setAttribute("src", url)
    })
    $('#BannerImagePreview').attr('style', 'width: 300px; height: 200px')

    $('#BannerText').click(function () { $('#BannerImageInput').trigger('click'); });
    $('#BannerImagePreview').click(function () { $('#BannerImageInput').trigger('click'); });

    /** Profile link search method*/
    const split = (val) => val.split(/,\s*/);
    const extractLast = (term) => split(term).pop();
    let _url = `${config.SERVER_URL}admin/user?search=`;

    $('.autocomplete').on("keydown", function (event) {
        if (event.keyCode === $.ui.keyCode.TAB &&
            $(this).autocomplete("instance").menu.active) {
            event.preventDefault();
        }
    }).autocomplete({
        minLength: 3,
        dataType: "json",
        source: function (request, response) {
            $.ajax({
                url: _url + request.term,
                dataType: "json",
                type: "GET",
                contentType: "application/json; charset=utf-8",
                headers: {
                    authorization: `Bearer ${token}`
                },
                success: (data) => {
                    let newarr = []
                    for (const e of data.data) {
                        newarr.push(e.name)
                    }

                    response(
                        $.map(data.data, function (item) {

                            var result = item.name
                            return { label: result, value: result }
                        }


                        )
                    );
                },
                error: function (response) {
                    ToastMsg(response.responseJSON.message);
                },
                failure: function (response) {
                    ToastMsg(response.responseJSON.message);
                }
            });
        },
        select: function (event, ui) {
            var terms = split(this.value);
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push(ui.item.value);
            // add placeholder to get the comma-and-space at the end
            terms.push("");
            this.value = terms.join(", ");
            return false;
        }

    });

</script>